{
	"info": {
		"_postman_id": "2da78f66-1506-4fb4-9dc1-ef44f290fdbc",
		"name": "Product Management API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39143863"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const categories = ['electronics', 'products', 'clothing'];\r",
									"\r",
									"const randomProduct = {\r",
									"    name: `Product_${Math.floor(Math.random() * 10000)}`,\r",
									"    price: +(Math.random() * 1000).toFixed(2),\r",
									"    count: Math.floor(Math.random() * 100) + 1,\r",
									"    category: categories[Math.floor(Math.random() * categories.length)]\r",
									"};\r",
									"const { baseURL, token } = pm.environment.toObject()\r",
									"pm.sendRequest({\r",
									"    url: baseURL + '/products',\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"      mode:'raw',\r",
									"      raw: JSON.stringify(randomProduct)\r",
									"    },\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",\r",
									"        \"Authorization\": `Bearer ${token}`\r",
									"    }\r",
									"}, function(err,res) {\r",
									"    if(err) {\r",
									"        console.log(err)\r",
									"        return;\r",
									"    }\r",
									"    const product = res.json()\r",
									"    pm.environment.set(\"get_product_id\", product._id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{get_product_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{get_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/statistics",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const categories = ['electronics', 'products', 'clothing'];\r",
									"\r",
									"const randomProduct = {\r",
									"    name: `Product_${Math.floor(Math.random() * 10000)}`,\r",
									"    price: +(Math.random() * 1000).toFixed(2),\r",
									"    count: Math.floor(Math.random() * 100) + 1,\r",
									"    category: categories[Math.floor(Math.random() * categories.length)]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"randomProduct\", JSON.stringify(randomProduct))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{randomProduct}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const categories = ['electronics', 'products', 'clothing'];\r",
									"\r",
									"const randomProduct = {\r",
									"    name: `Product_${Math.floor(Math.random() * 10000)}`,\r",
									"    price: +(Math.random() * 1000).toFixed(2),\r",
									"    count: Math.floor(Math.random() * 100) + 1,\r",
									"    category: categories[Math.floor(Math.random() * categories.length)]\r",
									"};\r",
									"const { baseURL, token } = pm.environment.toObject()\r",
									"pm.sendRequest({\r",
									"    url: baseURL + '/products',\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"      mode:'raw',\r",
									"      raw: JSON.stringify(randomProduct)\r",
									"    },\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",\r",
									"        \"Authorization\": `Bearer ${token}`\r",
									"    }\r",
									"}, function(err,res) {\r",
									"    if(err) {\r",
									"        console.log(err)\r",
									"        return;\r",
									"    }\r",
									"    const product = res.json()\r",
									"    pm.environment.set(\"delete_product_id\", product._id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/{{delete_product_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{delete_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const categories = ['electronics', 'products', 'clothing'];\r",
									"\r",
									"const randomProduct = {\r",
									"    name: `Product_${Math.floor(Math.random() * 10000)}`,\r",
									"    price: +(Math.random() * 1000).toFixed(2),\r",
									"    count: Math.floor(Math.random() * 100) + 1,\r",
									"    category: categories[Math.floor(Math.random() * categories.length)]\r",
									"};\r",
									"\r",
									"const { baseURL, token } = pm.environment.toObject()\r",
									"pm.sendRequest({\r",
									"    url: baseURL + '/products',\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"      mode:'raw',\r",
									"      raw: JSON.stringify(randomProduct)\r",
									"    },\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",\r",
									"        \"Authorization\": `Bearer ${token}`\r",
									"    }\r",
									"}, function(err,res) {\r",
									"    if(err) {\r",
									"        console.log(err)\r",
									"        return;\r",
									"    }\r",
									"    const product = res.json()\r",
									"    pm.environment.set(\"update_product_id\", product._id)\r",
									"})\r",
									"\r",
									"const updatedProduct = {\r",
									"    name: `Product_${Math.floor(Math.random() * 10000)}`,\r",
									"    price: +(Math.random() * 1000).toFixed(2),\r",
									"    count: Math.floor(Math.random() * 100) + 1,\r",
									"    category: categories[Math.floor(Math.random() * categories.length)]\r",
									"};\r",
									"\r",
									"pm.environment.set(\"updatedProduct\", JSON.stringify(updatedProduct))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedProduct}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products/{{update_product_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								"{{update_product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Данный раздел содержит эндпоинты для работы с товарами (Products):\n\n- Получение списка товаров\n    \n- Получение информации о товаре\n    \n- Получение статистики о товарах\n    \n- Создание, обновление и удаление товара\n    \n\n### Авторизация\n\nВсе эндпоинты в этой папке защищены авторизацией. Для доступа необходимо указать действительный Bearer Token в заголовке запроса.\n\nБез токена или с недействительным токеном сервер вернёт ошибку 401 Unauthorized.",
			"auth": {
				"type": "bearer"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateLogin() {\r",
									"    const minLength = 3;\r",
									"    const maxLength = 30;\r",
									"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
									"    let login = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        login += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return login;\r",
									"}\r",
									"\r",
									"function generatePassword() {\r",
									"    const minLength = 8;\r",
									"    const maxLength = 30;\r",
									"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\r",
									"    let password = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"const authData = {\r",
									"    login: generateLogin(),\r",
									"    password: generatePassword()\r",
									"};\r",
									"\r",
									"\r",
									"pm.environment.set(\"login\", JSON.stringify(authData));\r",
									"\r",
									"const baseURL = pm.environment.get(\"baseURL\")\r",
									"\r",
									"pm.sendRequest({\r",
									"    url:baseURL + '/auth/register',\r",
									"    method:'POST',\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(authData)\r",
									"    }, \r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{login}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateLogin() {\r",
									"    const minLength = 3;\r",
									"    const maxLength = 30;\r",
									"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
									"    let login = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        login += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return login;\r",
									"}\r",
									"\r",
									"function generatePassword() {\r",
									"    const minLength = 8;\r",
									"    const maxLength = 30;\r",
									"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\r",
									"    let password = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"const authData = {\r",
									"    login: generateLogin(),\r",
									"    password: generatePassword()\r",
									"};\r",
									"\r",
									"\r",
									"pm.environment.set(\"register\", JSON.stringify(authData));\r",
									"\r",
									"const baseURL = pm.environment.get(\"baseURL\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{register}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/register",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}